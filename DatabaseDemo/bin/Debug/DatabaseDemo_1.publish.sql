/*
Deployment script for PlatformAPIDemoDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PlatformAPIDemoDb"
:setvar DefaultFilePrefix "PlatformAPIDemoDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[tblChallenge]...';


GO
CREATE TABLE [dbo].[tblChallenge] (
    [ChallengeId]                  NVARCHAR (50) NOT NULL,
    [Time]                         TIME (7)      NOT NULL,
    [Date]                         DATE          NOT NULL,
    [LocationOfTheBasketballCourt] NVARCHAR (50) NOT NULL,
    [PlaceOfTeams]                 NVARCHAR (50) NOT NULL,
    [NumberOfTimeOrDateChanged]    INT           NULL,
    [IsChallengeComfirmed]         BIT           NULL,
    [IsChallengeFinished]          BIT           NULL,
    [VotesChallenger]              INT           NULL,
    [VotesChallenged]              INT           NULL,
    CONSTRAINT [PK_tblChallenge] PRIMARY KEY CLUSTERED ([ChallengeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblEvent]...';


GO
CREATE TABLE [dbo].[tblEvent] (
    [EventId]                    INT           IDENTITY (1, 1) NOT NULL,
    [Place]                      NVARCHAR (50) NOT NULL,
    [NumberOfTeamsInEvent]       INT           NOT NULL,
    [DateStart]                  DATE          NOT NULL,
    [DateEnd]                    DATE          NOT NULL,
    [NumberOfMatchesUntilTheEnd] INT           NOT NULL,
    [NumberOfMatchesPlayed]      INT           NOT NULL,
    [IsEventFinished]            BIT           NULL,
    CONSTRAINT [PK_tblEvent] PRIMARY KEY CLUSTERED ([EventId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblReport]...';


GO
CREATE TABLE [dbo].[tblReport] (
    [ReportId]       INT            IDENTITY (1, 1) NOT NULL,
    [ReportedTeamId] NVARCHAR (50)  NOT NULL,
    [SenderTeamId]   NVARCHAR (50)  NOT NULL,
    [ReportMessage]  NVARCHAR (250) NOT NULL,
    CONSTRAINT [PK_tblReport] PRIMARY KEY CLUSTERED ([ReportId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblTeam]...';


GO
CREATE TABLE [dbo].[tblTeam] (
    [TeamId]             NVARCHAR (50) NOT NULL,
    [TeamName]           NVARCHAR (50) NOT NULL,
    [PasswordHash]       NVARCHAR (50) NOT NULL,
    [ContactPhone]       INT           NOT NULL,
    [Player1]            NVARCHAR (50) NOT NULL,
    [Player2]            NVARCHAR (50) NOT NULL,
    [Player3]            NVARCHAR (50) NOT NULL,
    [Player4]            NVARCHAR (50) NOT NULL,
    [DateOfRegistration] DATE          NOT NULL,
    [Wins]               NVARCHAR (50) NULL,
    [Lost]               INT           NULL,
    [IsInTop5]           BIT           NULL,
    CONSTRAINT [PK_tblTeam] PRIMARY KEY CLUSTERED ([TeamId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblTeamInChallenge]...';


GO
CREATE TABLE [dbo].[tblTeamInChallenge] (
    [ChallengeId]      NVARCHAR (50) NOT NULL,
    [ChallengerTeamId] NVARCHAR (50) NOT NULL,
    [ChallengedTeamId] NVARCHAR (50) NOT NULL,
    [EventId]          INT           NOT NULL,
    CONSTRAINT [PK_tblTeamInChallenge_1] PRIMARY KEY CLUSTERED ([ChallengeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblTeamInEvent]...';


GO
CREATE TABLE [dbo].[tblTeamInEvent] (
    [EventId] INT           NOT NULL,
    [TeamId]  NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_tblTeamInEvent] PRIMARY KEY CLUSTERED ([EventId] ASC, [TeamId] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblVoteOnWaiting]...';


GO
CREATE TABLE [dbo].[tblVoteOnWaiting] (
    [TeamId]               NVARCHAR (50) NOT NULL,
    [ChallengeId]          NVARCHAR (50) NOT NULL,
    [ExpiringDateForVotes] DATE          NOT NULL,
    CONSTRAINT [PK_tblVoteOnWaiting] PRIMARY KEY CLUSTERED ([TeamId] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblReport_tblTeam]...';


GO
ALTER TABLE [dbo].[tblReport]
    ADD CONSTRAINT [FK_tblReport_tblTeam] FOREIGN KEY ([ReportedTeamId]) REFERENCES [dbo].[tblTeam] ([TeamId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInChallenge_ChallengedTeamId]...';


GO
ALTER TABLE [dbo].[tblTeamInChallenge]
    ADD CONSTRAINT [FK_tblTeamInChallenge_ChallengedTeamId] FOREIGN KEY ([ChallengedTeamId]) REFERENCES [dbo].[tblTeam] ([TeamId]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInChallenge_ChallengerTeamId]...';


GO
ALTER TABLE [dbo].[tblTeamInChallenge]
    ADD CONSTRAINT [FK_tblTeamInChallenge_ChallengerTeamId] FOREIGN KEY ([ChallengerTeamId]) REFERENCES [dbo].[tblTeam] ([TeamId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInChallenge_tblChallenge]...';


GO
ALTER TABLE [dbo].[tblTeamInChallenge]
    ADD CONSTRAINT [FK_tblTeamInChallenge_tblChallenge] FOREIGN KEY ([ChallengeId]) REFERENCES [dbo].[tblChallenge] ([ChallengeId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInChallenge_tblEvent]...';


GO
ALTER TABLE [dbo].[tblTeamInChallenge]
    ADD CONSTRAINT [FK_tblTeamInChallenge_tblEvent] FOREIGN KEY ([EventId]) REFERENCES [dbo].[tblEvent] ([EventId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInEvent_tblEvent]...';


GO
ALTER TABLE [dbo].[tblTeamInEvent]
    ADD CONSTRAINT [FK_tblTeamInEvent_tblEvent] FOREIGN KEY ([EventId]) REFERENCES [dbo].[tblEvent] ([EventId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblTeamInEvent_tblTeam]...';


GO
ALTER TABLE [dbo].[tblTeamInEvent]
    ADD CONSTRAINT [FK_tblTeamInEvent_tblTeam] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[tblTeam] ([TeamId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblVoteOnWaiting_ChallengeId]...';


GO
ALTER TABLE [dbo].[tblVoteOnWaiting]
    ADD CONSTRAINT [FK_tblVoteOnWaiting_ChallengeId] FOREIGN KEY ([ChallengeId]) REFERENCES [dbo].[tblChallenge] ([ChallengeId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblVoteOnWaiting_tblTeam]...';


GO
ALTER TABLE [dbo].[tblVoteOnWaiting]
    ADD CONSTRAINT [FK_tblVoteOnWaiting_tblTeam] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[tblTeam] ([TeamId]) ON DELETE CASCADE;


GO
PRINT N'Creating Procedure [dbo].[spChallenge_Delete]...';


GO
CREATE PROCEDURE [dbo].[spChallenge_Delete]
 @Id nvarchar(50)
AS
begin
	Delete
	from dbo.[tblChallenge]
	where ChallengeId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spChallenge_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spChallenge_GetAll]
AS
begin 
   SELECT *
   from dbo.[tblChallenge];
end
GO
PRINT N'Creating Procedure [dbo].[spChallenge_GetChallenge]...';


GO
CREATE PROCEDURE [dbo].[spChallenge_GetChallenge]
   @Id nvarchar(50)
AS
begin
   SELECT * 
   from dbo.[tblChallenge]
   where ChallengeId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spChallenge_Insert]...';


GO
CREATE PROCEDURE [dbo].[spChallenge_Insert]
	@ChallengeId nvarchar(50),
	@Date date,
	@Time time,
	@IsChallengeComfirmed bit,
	@IsChallengeFinished bit,
	@LocationOfTheBasketballCourt nvarchar(50),
	@NumberOfTimeOrDateChanged int,
	@PlaceOfTeams nvarchar(50),
	@VotesChallenged int,
	@VotesChallenger int
AS
begin
	insert into dbo.[tblChallenge] (ChallengeId,Date,Time,IsChallengeComfirmed,IsChallengeFinished,LocationOfTheBasketballCourt,NumberOfTimeOrDateChanged,PlaceOfTeams,VotesChallenged,VotesChallenger)
	values(@ChallengeId, @Date, @Time, @IsChallengeComfirmed, @IsChallengeFinished, @LocationOfTheBasketballCourt, @NumberOfTimeOrDateChanged, @PlaceOfTeams, @VotesChallenged,@VotesChallenger)
end
GO
PRINT N'Creating Procedure [dbo].[spChallenge_Update]...';


GO
CREATE PROCEDURE [dbo].[spChallenge_Update]
    @ChallengeId nvarchar(50),
	@Date date,
	@Time time,
	@IsChallengeComfirmed bit,
	@IsChallengeFinished bit,
	@LocationOfTheBasketballCourt nvarchar(50),
	@NumberOfTimeOrDateChanged int,
	@PlaceOfTeams nvarchar(50),
	@VotesChallenged int,
	@VotesChallenger int
AS
begin
   update dbo.[tblChallenge]
   set ChallengeId = @ChallengeId, Date = @Date, Time = @Time, IsChallengeComfirmed = @IsChallengeComfirmed, IsChallengeFinished = @IsChallengeFinished,
   LocationOfTheBasketballCourt = @LocationOfTheBasketballCourt, NumberOfTimeOrDateChanged = @NumberOfTimeOrDateChanged, PlaceOfTeams = @PlaceOfTeams,
   VotesChallenged = @VotesChallenged, VotesChallenger = @VotesChallenger
   where ChallengeId = @ChallengeId;
end
GO
PRINT N'Creating Procedure [dbo].[spEvent_Delete]...';


GO
CREATE PROCEDURE [dbo].[spEvent_Delete]
    @Id int
AS
begin
	Delete
	from dbo.[tblEvent]
	where EventId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spEvent_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spEvent_GetAll]
AS
begin
  SELECT * 
  from dbo.[tblEvent];
end
GO
PRINT N'Creating Procedure [dbo].[spEvent_GetEvent]...';


GO
CREATE PROCEDURE [dbo].[spEvent_GetEvent]
	@Id int
AS
begin
  SELECT * 
  from dbo.[tblEvent]
  where EventId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spEvent_Insert]...';


GO
CREATE PROCEDURE [dbo].[spEvent_Insert]
	@EventId int,
	@DateEnd date,
	@DateStart date,
	@IsEventFinished bit,
	@NumberOfMathchesPlayed int,
	@NumberOfMatchesUntilTheEnd int, 
	@NumberOfTeamsInEvent int,
	@Place nvarchar(50)
AS
begin
	insert into dbo.[tblEvent] (EventId, DateEnd, DateStart, IsEventFinished, NumberOfMatchesPlayed,NumberOfMatchesUntilTheEnd,NumberOfTeamsInEvent, Place)
	values(@EventId, @DateEnd, @DateStart, @IsEventFinished, @NumberOfMathchesPlayed, @NumberOfMatchesUntilTheEnd, @NumberOfTeamsInEvent, @Place)
end
GO
PRINT N'Creating Procedure [dbo].[spEvent_Update]...';


GO
CREATE PROCEDURE [dbo].[spEvent_Update]
	@EventId int,
	@DateEnd date,
	@DateStart date,
	@IsEventFinished bit,
	@NumberOfMathchesPlayed int,
	@NumberOfMatchesUntilTheEnd int, 
	@NumberOfTeamsInEvent int,
	@Place nvarchar(50)
AS
begin
  update dbo.[tblEvent]
  set EventId = @EventId, DateEnd = @DateEnd, DateStart = @DateStart, IsEventFinished = @IsEventFinished, NumberOfMatchesPlayed = @NumberOfMathchesPlayed,
  NumberOfMatchesUntilTheEnd = @NumberOfMatchesUntilTheEnd, NumberOfTeamsInEvent = @NumberOfTeamsInEvent, Place = @Place
  where EventId = @EventId;
end
GO
PRINT N'Creating Procedure [dbo].[spReport_Delete]...';


GO
CREATE PROCEDURE [dbo].[spReport_Delete]
	@Id int
AS
begin
	Delete
	from dbo.[tblReport]
	where ReportId = @Id
end
GO
PRINT N'Creating Procedure [dbo].[spReport_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spReport_GetAll]
AS
begin
	SELECT * 
	from dbo.[tblReport];
end
GO
PRINT N'Creating Procedure [dbo].[spReport_GetReport]...';


GO
CREATE PROCEDURE [dbo].[spReport_GetReport]
	@Id int
AS
begin 
	SELECT *
	from dbo.[tblReport]
	where ReportId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spReport_Insert]...';


GO
CREATE PROCEDURE [dbo].[spReport_Insert]
	@ReportId int,
	@ReportTeamId nvarchar(50),
	@SenderTeamId nvarchar(50),
	@ReportMessage nvarchar(250)
AS
begin
	insert into dbo.[tblReport] (ReportId, ReportedTeamId, SenderTeamId, ReportMessage)
	values (@ReportId, @ReportTeamId, @SenderTeamId, @ReportMessage)
end
GO
PRINT N'Creating Procedure [dbo].[spReport_Update]...';


GO
CREATE PROCEDURE [dbo].[spReport_Update]
	@ReportId int,
	@ReportTeamId nvarchar(50),
	@SenderTeamId nvarchar(50),
	@ReportMessage nvarchar(250)
AS
begin
	update dbo.[tblReport]
	set ReportId = @ReportId, ReportedTeamId = @ReportTeamId, SenderTeamId = @SenderTeamId, ReportMessage = @ReportMessage
	where ReportId = @ReportId;
end
GO
PRINT N'Creating Procedure [dbo].[spTeam_Delete]...';


GO
CREATE PROCEDURE [dbo].[spTeam_Delete]
    @Id nvarchar(50)
AS
begin
	Delete
	from dbo.[tblTeam]
	where TeamId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spTeam_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spTeam_GetAll]
AS
begin
	SELECT * 
	from dbo.[tblTeam];
end
GO
PRINT N'Creating Procedure [dbo].[spTeam_GetTeam]...';


GO
CREATE PROCEDURE [dbo].[spTeam_GetTeam]
    @Id nvarchar(50)
AS
begin
	SELECT * 
	from dbo.[tblTeam]
	where TeamId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spTeam_Insert]...';


GO
CREATE PROCEDURE [dbo].[spTeam_Insert]
    @TeamId nvarchar(50),
    @ContactPhone int,
    @DateOfRegistration date,
    @IsInTop5 bit,
    @Lost int,
    @PasswordHash nvarchar(50),
    @Player1 nvarchar(50),
    @Player2 nvarchar(50),
    @Player3 nvarchar(50),
    @Player4 nvarchar(50),
    @TeamName nvarchar(50),
    @Wins int
AS
begin
  insert into dbo.[tblTeam] (ContactPhone, DateOfRegistration, IsInTop5, Lost,PasswordHash,Player1,Player2,Player3,Player4,TeamId,TeamName,Wins)
  values (@ContactPhone, @DateOfRegistration, @IsInTop5, @IsInTop5, @Lost, @PasswordHash, @Player1, @Player2, @Player3,@Player4, @TeamId,@TeamName,@Wins);
end
GO
PRINT N'Creating Procedure [dbo].[spTeam_Update]...';


GO
CREATE PROCEDURE [dbo].[spTeam_Update]
	@TeamId nvarchar(50),
    @ContactPhone int,
    @DateOfRegistration date,
    @IsInTop5 bit,
    @Lost int,
    @PasswordHash nvarchar(50),
    @Player1 nvarchar(50),
    @Player2 nvarchar(50),
    @Player3 nvarchar(50),
    @Player4 nvarchar(50),
    @TeamName nvarchar(50),
    @Wins int
AS
begin
   update dbo.[tblTeam]
   set TeamId = @TeamId, ContactPhone = @ContactPhone, DateOfRegistration = @DateOfRegistration, IsInTop5 = @IsInTop5,
   Lost = @Lost, PasswordHash = @PasswordHash , Player1 = @Player1, Player2 = @Player2, Player3 = @Player3, Player4 = @Player4,
   TeamName = @TeamName, Wins = @Wins
   where TeamId = @TeamId;
end
GO
PRINT N'Creating Procedure [dbo].[spTeaminChallenge_Delete]...';


GO
CREATE PROCEDURE [dbo].[spTeaminChallenge_Delete]
	@ChallengeId nvarchar(50)
AS
begin
	delete
	from dbo.[tblTeamInChallenge]
	where ChallengeId = @ChallengeId
end
GO
PRINT N'Creating Procedure [dbo].[spTeamInChallenge_Insert]...';


GO
CREATE PROCEDURE [dbo].[spTeamInChallenge_Insert]
	@ChallengedTeamId nvarchar(50),
	@ChallengerTeamId nvarchar(50),
	@ChallengeId nvarchar(50),
	@EventId int
AS
begin
	insert into dbo.[tblTeamInChallenge] (ChallengedTeamId, ChallengerTeamId, ChallengeId, EventId)
	values (@ChallengedTeamId, @ChallengerTeamId, @ChallengeId, @EventId)
end
GO
PRINT N'Creating Procedure [dbo].[spTeamInEvent_Delete]...';


GO
CREATE PROCEDURE [dbo].[spTeamInEvent_Delete]
	@TeamId nvarchar(50)
AS
begin
	delete 
	from dbo.[tblTeamInEvent]
	where TeamId = @TeamId;
end
GO
PRINT N'Creating Procedure [dbo].[spTeamInEvent_Insert]...';


GO
CREATE PROCEDURE [dbo].[spTeamInEvent_Insert]
	@TeamId nvarchar(50),
	@EventId int
AS
begin
	insert into dbo.[tblTeamInEvent] (TeamId, EventId)
	values (@TeamId, @EventId)
end
GO
PRINT N'Creating Procedure [dbo].[spVoteOnWaiting_Delete]...';


GO
CREATE PROCEDURE [dbo].[spVoteOnWaiting_Delete]
	@Id nvarchar(50)
AS
begin
	Delete
	from dbo.[tblVoteOnWaiting]
	where TeamId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spVoteOnWaiting_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spVoteOnWaiting_GetAll]
AS
begin
	SELECT *
	from dbo.[tblVoteOnWaiting]
end
GO
PRINT N'Creating Procedure [dbo].[spVoteOnWaiting_GetVote]...';


GO
CREATE PROCEDURE [dbo].[spVoteOnWaiting_GetVote]
	@Id nvarchar(50)
AS
begin
	SELECT *
	from dbo.[tblVoteOnWaiting]
	where TeamId = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spVoteOnWaiting_Insert]...';


GO
CREATE PROCEDURE [dbo].[spVoteOnWaiting_Insert]
	@ChallengeId nvarchar(50),
	@TeamId nvarchar(50),
	@ExpiringDateForVotes date
AS
begin
	insert into dbo.[tblVoteOnWaiting] (ChallengeId, TeamId, ExpiringDateForVotes)
	values (@ChallengeId, @TeamId, @ExpiringDateForVotes)
end
GO
PRINT N'Creating Procedure [dbo].[spVoteOnWaiting_Update]...';


GO
CREATE PROCEDURE [dbo].[spVoteOnWaiting_Update]
    @ChallengeId nvarchar(50),
	@TeamId nvarchar(50),
	@ExpiringDateForVotes date
AS
begin
	update dbo.[tblVoteOnWaiting]
	set TeamId = @TeamId, ChallengeId = @ChallengeId, ExpiringDateForVotes = @ExpiringDateForVotes
	where TeamId = @TeamId;
end
GO
if not exists (select 1 from dbo.[tblTeam])
begin
	insert into dbo.[tblTeam] (ContactPhone, DateOfRegistration, IsInTop5, Lost,PasswordHash,Player1,Player2,Player3,Player4,TeamId,TeamName,Wins)
	values ('061525846', '2021-6-4', 0, NULL, 'adsa23-411', 'Mirko','Slavko','Jovan','Uros', 'dsadsa2321', 'Tim23', NULL),
	('064313245', '2021-6-4', 0, NULL, 'dasds-dsa2', 'Nemanja','Milos','Stefan','Dragan', 'dsadasd2133', 'Druzina', NULL),
	('063213134', '2021-6-7', 0, NULL, 'dsadsadg-21a', 'Steva','Marko','Jovan','Momcilo', 'gfdghfdg1321', 'Beraci Pamuka', NULL),
	('062343243', '2021-6-10', 0, NULL, 'dghtefa-23s', 'Vuk','Vlada','Zarko','Milan', 'gfdgdawer23', 'Beda iz predgradja', NULL),
	('066564452', '2021-6-6', 0, NULL, 'dasgfdgsg-das', 'Mirko','Slavko','Jovan','Uros', 'dsadf2fd3221', 'KK Mega', NULL)
	
end
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
